/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import static java.nio.file.Files.copy;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author maiso
 */
public class LogFile extends javax.swing.JFrame {

    /**
     * Creates new form LogFile
     */
    private String logPath;
    public LogFile() {
        CreateLog();
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public void CreateLog(){
        logPath = "E:\\test\\log\\info.log";
        File logFile = new File(logPath);
        if(!logFile.exists()){
            try {
                logFile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void WriteLog(String event){
        LocalDateTime ldt = LocalDateTime.now();
        String pattern = "YYYY-MM-dd hh:mm:ss";
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(pattern);
        String dateTimeFormat = ldt.format(dtf);
        try {
            FileWriter filewriter = new FileWriter(logPath,true);
            filewriter.write(dateTimeFormat+"\t"+event+"\n");
            filewriter.close();
            
        } catch (IOException ex) {
            Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this Scode. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jText_Path = new javax.swing.JTextField();
        jButton_Browse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jText_Content = new javax.swing.JTextPane();
        jButton_Create = new javax.swing.JButton();
        jButton_Rename = new javax.swing.JButton();
        jButton_Copy = new javax.swing.JButton();
        jButton_Move = new javax.swing.JButton();
        jButton_Delete = new javax.swing.JButton();
        jButton_Log = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel1.setText("Path");

        jButton_Browse.setText("Browse");
        jButton_Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BrowseActionPerformed(evt);
            }
        });

        jText_Content.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(jText_Content);

        jButton_Create.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_Create.setText("Create");
        jButton_Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CreateActionPerformed(evt);
            }
        });

        jButton_Rename.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_Rename.setText("Rename");
        jButton_Rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RenameActionPerformed(evt);
            }
        });

        jButton_Copy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_Copy.setText("Copy");
        jButton_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CopyActionPerformed(evt);
            }
        });

        jButton_Move.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_Move.setText("Move");
        jButton_Move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MoveActionPerformed(evt);
            }
        });

        jButton_Delete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_Delete.setText("Delete");
        jButton_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteActionPerformed(evt);
            }
        });

        jButton_Log.setText("Log");
        jButton_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LogActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_Create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(53, 53, 53)
                        .addComponent(jButton_Rename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(55, 55, 55)
                        .addComponent(jButton_Copy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(67, 67, 67)
                        .addComponent(jButton_Move, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50)
                        .addComponent(jButton_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jText_Path, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton_Browse))))
                .addGap(33, 33, 33))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_Log)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jText_Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Browse))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_Create)
                        .addComponent(jButton_Rename)
                        .addComponent(jButton_Copy))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_Delete)
                        .addComponent(jButton_Move)))
                .addGap(18, 18, 18)
                .addComponent(jButton_Log)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton_BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnValue = fileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            jText_Path.setText(path);
            jText_Content.setText(listAllFiles(path, 0));
        }
            
        
        
    }//GEN-LAST:event_jButton_BrowseActionPerformed

    private void jButton_CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CreateActionPerformed
        // TODO add your handling code here:
        String newFileName = JOptionPane.showInputDialog(this,"Enter a name for new file", "Create",JOptionPane.QUESTION_MESSAGE);
        String currentLocation = jText_Path.getText();
        File currentFile = new File(currentLocation);
        if(newFileName != null){
             if(currentFile.isFile()){
                File parentFile = new File(currentFile.getParent());
                File newFile = new File(parentFile.getAbsolutePath()+"\\"+newFileName);
                if(!newFile.exists()){
                    try {
                        newFile.createNewFile();
                        WriteLog(newFileName+" is created at "+ newFile.getAbsolutePath());
                        JOptionPane.showMessageDialog(this, "File created !");
                        jText_Path.setText(parentFile.getAbsolutePath());
                        jText_Content.setText(listAllFiles(parentFile.getAbsolutePath(), 0));
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Cannot create file");
                        WriteLog(ex.getMessage());
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "File is already exist");
                    WriteLog("Duplicate file");
                }
            }
            else{
                File newFile = new File(currentFile.getAbsolutePath()+"\\"+newFileName);
                if(!newFile.exists()){
                    try {
                        newFile.createNewFile();
                        WriteLog(newFileName+" is created at "+newFile.getAbsolutePath());
                        JOptionPane.showMessageDialog(this, "File created !");
                        jText_Path.setText(currentFile.getAbsolutePath());
                        jText_Content.setText(listAllFiles(currentFile.getAbsolutePath(), 0));
                    } catch (IOException ex) {
                         JOptionPane.showMessageDialog(this, "Cannot create file");
                         WriteLog(ex.getMessage());
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "File is already exists");
                    WriteLog("Cannot create file due to file is already exitst");
                }

            }
            
        }
       
       
    }//GEN-LAST:event_jButton_CreateActionPerformed

    private void jButton_RenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RenameActionPerformed
        // TODO add your handling code here:
        String newFileName = JOptionPane.showInputDialog(this, "Enter a new name", "Rename",JOptionPane.QUESTION_MESSAGE);
        String currentLocation = jText_Path.getText();
        File currentFile = new File(currentLocation);
        if(newFileName==null) return;
        if(currentFile.isFile()){
             File parentFile = new File(currentFile.getParent());
             File renameFile = new File(parentFile.getAbsolutePath()+"\\"+newFileName);
            if(renameFile.exists()){
                 JOptionPane.showMessageDialog(this, "Name is existed. Choose another");
                 WriteLog("Cannot rename file due to name is duplicate");
            }
            else{       
                boolean result = currentFile.renameTo(renameFile);
                if(!result){
                    JOptionPane.showMessageDialog(this, "Cannot rename");
                    WriteLog("Cannot rename "+ currentFile.getAbsolutePath()+ " to "+renameFile.getAbsolutePath());
                }
                else{
                     jText_Path.setText(renameFile.getAbsolutePath());
                     WriteLog(currentFile.getAbsolutePath()+" is renamed to "+renameFile.getAbsolutePath());
                }
               
            }
            
        }
        else{
             File parentFile = new File(currentFile.getParent());
             File renameFile = new File(parentFile.getAbsolutePath()+"\\"+newFileName);
             if(renameFile.exists()){
                 JOptionPane.showMessageDialog(this, "Name is existed. Choose another");
                  WriteLog("Cannot rename file due to name is duplicate");
            }
            else{       
                boolean result = currentFile.renameTo(renameFile);
                if(!result){
                    JOptionPane.showMessageDialog(this, "Cannot rename");
                    WriteLog("Cannot rename "+currentFile.getAbsolutePath()+" to " + renameFile.getAbsolutePath());
                }
                else{
                    jText_Path.setText(renameFile.getAbsolutePath());
                    jText_Content.setText(listAllFiles(renameFile.getAbsolutePath(), 0));
                    WriteLog(currentFile.getAbsolutePath() + " is renamed to "+renameFile.getAbsolutePath());
                }
            }
        }
    }//GEN-LAST:event_jButton_RenameActionPerformed
   
   
    private void jButton_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CopyActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            String source = jText_Path.getText();
            String dest = fileChooser.getSelectedFile().getAbsolutePath();
            boolean result = copyFiles(source, dest);
            if(!result){
                JOptionPane.showMessageDialog(this, "Cannot copy","Error",JOptionPane.ERROR_MESSAGE);
                WriteLog("Cannot copy from "+source+" to "+dest);
            }
            else{
                JOptionPane.showMessageDialog(this, "Success");
                WriteLog("Copy from " + source + " to "+dest);
            }
                
        }
    }//GEN-LAST:event_jButton_CopyActionPerformed

    private void jButton_MoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MoveActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            String source = jText_Path.getText();
            String dest = fileChooser.getSelectedFile().getAbsolutePath();
            boolean result = moveFiles(source,dest);
            if(result){
                JOptionPane.showMessageDialog(this, "Success");
                File fileDest = new File(dest);
                jText_Path.setText(fileDest.getAbsolutePath());
                jText_Content.setText(listAllFiles(fileDest.getAbsolutePath(), 0));
                WriteLog("Move file from "+ source + " to "+dest);
            }
            else{
                JOptionPane.showMessageDialog(this, "Cannot move","Error",JOptionPane.ERROR_MESSAGE);
                WriteLog("Cannot move file from "+ source + " to "+dest);
            }
        }
    }//GEN-LAST:event_jButton_MoveActionPerformed

    private void jButton_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure ?", "Delete", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(choice == JOptionPane.YES_OPTION){
            String deletePath = jText_Path.getText();
            boolean result = deleteFiles(deletePath);
            if(result){
                 File deleteFile = new File(deletePath);
                File parentFile = new File(deleteFile.getParent());
                jText_Path.setText(parentFile.getAbsolutePath());
                jText_Content.setText(listAllFiles(parentFile.getAbsolutePath(),0));
                WriteLog("Delete file at "+deleteFile.getAbsolutePath());
            }
            else{
                JOptionPane.showMessageDialog(this, "Cannot delete","Error",JOptionPane.ERROR_MESSAGE);
            }
   
           
            
        }
    }//GEN-LAST:event_jButton_DeleteActionPerformed

    private void jButton_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LogActionPerformed
        // TODO add your handling code here:
        
        try {
            FileReader fr = new FileReader(logPath);
             BufferedReader br = new BufferedReader(fr);
             String line;
             String content = "";
             while((line = br.readLine()) != null){
                 content += line +"\n";
             }
             jText_Content.setText(content);
        } catch (FileNotFoundException ex) {
            WriteLog(ex.getMessage());
        } catch (IOException ex) {
            WriteLog(ex.getMessage());
        }
       
        
    }//GEN-LAST:event_jButton_LogActionPerformed
    private String listAllFiles(String path,int level){
        String result = "";
        File f = new File(path);
        for(int i = 0; i < level; i++){
            result += "\t";
        }
        result += (level==0?"":"|_")+f.getName()+"\n";
        if(f.isFile()){
            return "(file)"+"\t"+result;
        }
        else{
            for(File file:f.listFiles()){
                result+= listAllFiles(file.getAbsolutePath(),level+1);
            }
            return "(folder)"+"\t"+result;
        }
    }
     private boolean copyFiles(String source,String destination){
        boolean status = true;
        Path sourcePath = Path.of(source);
        Path destPath = Path.of(destination);
        Path newPath = destPath.resolve(sourcePath.getFileName());
        try {
            Files.copy(sourcePath, newPath, StandardCopyOption.COPY_ATTRIBUTES);
        } catch (IOException ex) {
            status = false; 
            WriteLog(ex.getMessage());
        }
        File sourceFile = new File(source);
        if(sourceFile.isDirectory()){
            for(File f: sourceFile.listFiles()){
                copyFiles(f.getAbsolutePath(), newPath.toString());
            }
        }
        return status;
    }
     private boolean moveFiles(String source,String destination){
         boolean status = true;
         File sourceFile = new File(source);
         File destFile = new File(destination+"\\"+sourceFile.getName());
         boolean result = sourceFile.renameTo(destFile);
         if(!result){
              status = false;
          }
         if(sourceFile.isDirectory()){
              for(File f : sourceFile.listFiles()){
                  moveFiles(f.getAbsolutePath(),destination);
              }
          }
        
         return status;
     }
     
     private boolean deleteFiles(String path){
         boolean status = true;
         File deleteFile = new File(path);
         try {
            if(deleteFile.isDirectory()){
                for(File f : deleteFile.listFiles()){
                    deleteFiles(f.getAbsolutePath());
                }
           }
         deleteFile.delete();
         } catch (Exception e) {
             e.printStackTrace();
             status = false;
         }
         return status; 
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            //</editor-fold>
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(LogFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton_Browse;
    private javax.swing.JButton jButton_Copy;
    private javax.swing.JButton jButton_Create;
    private javax.swing.JButton jButton_Delete;
    private javax.swing.JButton jButton_Log;
    private javax.swing.JButton jButton_Move;
    private javax.swing.JButton jButton_Rename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jText_Content;
    private javax.swing.JTextField jText_Path;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
